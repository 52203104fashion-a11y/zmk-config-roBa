#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 50

&trackball_listener {
    /* XY 反転（上下逆付けの応急処置） */

    input-processors = <
        &zip_xy_transform (INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT) 
    >;

    scroll_mode {
        layers = <5>;
        input-processors = <
            /* 1) XY移動 → スクロールへ変換（X→水平, Y→垂直） */
            &zip_xy_to_scroll_mapper
            /* 2) 垂直スクロールを x/y 倍（≒ speed 80 相当） */
            &zip_wheel_only_scaler 1 5
            /* 3) 水平スクロールは 0 倍（無効化） */
            &zip_hwheel_killer 0 1
        >;
    };
};

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    // automouse-layer = <4>;
    // scroll-layers = <5>;
    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    /* 垂直スクロールだけをスケールする Scaler */

    input_processors {
        zip_wheel_only_scaler: zip_wheel_only_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;

            /* 垂直スクロールのみ対象 */

            codes = <INPUT_REL_WHEEL>;
            track-remainders; /* 任意：余りを蓄積して滑らかに */
        };

        /* 水平スクロールだけをスケール（=0 で無効化） */

        zip_hwheel_killer: zip_hwheel_killer {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;

            /* 水平スクロールのみ対象 */

            codes = <INPUT_REL_HWHEEL>;
        };
    };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        ad_id: ad_id {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp A &kp T &kp O &kp S &kp H &kp I &kp PERIOD &kp N &kp A &kp K &kp A &kp G &kp A &kp W &kp A &kp SLASH &kp P &kp W &kp C &kp PERIOD &kp C &kp O &kp M>;
            label = "AD_ID";
        };

        ad_pw: ad_pw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_2 &kp N0 &kp NUMBER_2 &kp NUMBER_5 &kp SLASH &kp LS(K) &kp E &kp I>;
            label = "AD_PW";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W    &kp E         &kp R           &kp T                                                                              &kp Y            &kp U  &kp I      &kp O      &kp P
&kp A      &kp S    &kp D         &kp F           &kp G                   &msc MOVE_Y(0)                 &lt_to_layer_0 4 C_AC_HOME  &kp H            &kp J  &kp K      &kp L      &kp ENTER
&kp Z      &kp X    &kp C         &kp V           &kp B                   &none                          &none                       &kp N            &kp M  &mkp LCLK  &mkp RCLK  &kp LEFT_BRACKET
&kp LCTRL  &kp TAB  &kp LEFT_ALT  &kp LEFT_SHIFT  &lt_to_layer_0 1 SPACE  &lt_to_layer_0 3 LEFT_GUI      &kp LEFT_CONTROL            &lt 2 BACKSPACE                               &lt_to_layer_0 5 ESC
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FUNCTION {
            bindings = <
&kp LS(NUMBER_1)       &kp LS(NUMBER_2)    &kp LS(NUMBER_3)    &kp LS(NUMBER_4)  &kp LS(N5)                                 &kp LS(NUMBER_6)  &kp LS(N7)  &kp LS(N8)      &kp LS(N9)      &kp INT_RO
&kp LS(DOUBLE_QUOTES)  &kp LS(APOSTROPHE)  &kp LS(LEFT_BRACE)  &kp LS(EQUAL)     &kp LS(MINUS)  &trans      &bt BT_CLR_ALL  &kp MINUS         &kp EQUAL   &kp LEFT_BRACE  &kp APOSTROPHE  &kp RIGHT_BRACE
&kp LS(NON_US_HASH)    &kp LS(SEMI)        &kp LS(SLASH)       &kp LS(PERIOD)    &kp LS(COMMA)  &trans      &trans          &kp COMMA         &kp PERIOD  &kp SLASH       &kp SEMICOLON   &kp NON_US_HASH
&kp LEFT_SHIFT         &trans              &kp INT_RO          &trans            &trans         &trans      &trans          &kp DEL                                                       &trans
            >;
        };

        NUM {
            bindings = <
&kp LEFT_ALT  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_PLUS                       &kp CARET   &kp AMPERSAND     &kp UP_ARROW    &kp LEFT_PARENTHESIS  &kp LC(S)
&kp ASTERISK  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS  &trans      &trans  &none       &kp LEFT_ARROW    &kp DOWN_ARROW  &kp RIGHT_ARROW       &kp LS(LC(SEMI))
&kp SLASH     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_EQUAL  &trans      &trans  &kp PERIOD  &kp LEFT_CONTROL  &mkp MB4        &mkp MB5              &none
&trans        &trans           &kp KP_NUMBER_0  &trans           &trans        &trans      &trans  &trans                                                              &trans
            >;
        };

        ARROW {
            bindings = <
&kp LG(X)     &kp F7       &kp F8  &kp F9  &kp F11                      &kp LG(I)      &kp LG(F)           &kp LG(UP_ARROW)    &kp LC(F4)           &kp LC(LS(DELETE))
&kp LG(SEMI)  &kp F4       &kp F5  &kp F6  &kp F12  &trans      &trans  &kp LS(LG(S))  &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(RIGHT_ARROW)  &ad_id
&kp LG(APOS)  &kp F1       &kp F2  &kp F3  &kp F13  &trans      &trans  &kp LS(LG(V))  &kp LEFT_CONTROL    &trans              &kp LA(F4)           &kp TAB
&trans        &kp LG(TAB)  &trans  &trans  &trans   &trans      &trans  &trans                                                                      &ad_pw
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MOUSE {
            bindings = <
&trans  &trans        &trans        &trans        &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 3  &bt BT_SEL 4  &trans        &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(TAB)   &trans        &trans        &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
